{
	"defaultProtocol":"smpp",						// Can be smpp or http. Default is smpp. 
	"defaultSender":"",								// sender which be be used as a default one (it will be overwritten if a new one will be specified in the client functions)
	"useSSL":false,									// whether or not to use Secure Socket Layer. Default is false. Not yet implemented.
	"smppConfiguration": {
		"systemId":"SmppBasicSend",					// smpp username
		"password":"SmppBasic",						// smpp password
		"host":"127.0.0.1",							// smpp server
		"port":9000,								// smpp server port
		"connectSMSSessionOnAddListener":true, 		// if true 'SMS' connection will be established when first DLR or MO listener will be added, if false when sending first 'SMS'. 
		"connectFlashSessionOnAddListener":false,   // if true 'Flash Notification' connection will be established when first DLR or MO listener will be added, if false when sending first 'Flash Notification'. 
		"connectHLRSessionOnAddListener":false,     // if true 'HLR' connection will be established when first DLR or MO listener will be added, if false when sending first 'HLR' request. 
		"requestExpiryTimeout":30000,				// The amount of time to wait (in ms) before an unacknowledged request expires. -1 disables.
		"keepAliveInterval":30000,					// enquire_link interval in milliseconds. enquire_link keeps the smpp channel alive.
		"systemType":"",							// Indicates the type of service associated with the message.
		"smppName":"Client.Session.0",				// smpp session name
		"windowMonitorInterval":15000,				// The amount of time to wait (in ms) between executions of monitoring the window. Must be 50%-100% of the requestExpiryTimeout value.
		"windowSize":20,							// max concurrent pending PDU requests. One PDU starts with sending request and finishes when the server responds (or timeout expires).
		"connectionTimeout":10000,					// in milliseconds
		"countersEnabled":false,
		"registeredDelivery":1,						// Flag indicating if the message is a registered short message and thus if a Delivery Receipt is required upon the message attaining a final state. 0=No receipt required (non-registered delivery). 1=Receipt required (registered delivery).
		"setLogBytes":false							// whether or not to log bytes. Bytes in log are useful when debugging, but creates large log. Default is false.
	},
	"httpConfiguration": {
		"username":"acctest",																// http access username
		"password":"acctest",																// http access password
		"sendMessageUrl":"http://api2.infobip.com/api/sendsms/json",					// url to send sms
		"availableCreditsUrl":"http://api2.infobip.com/api/command",					// url to check the balance
		"incomingMessagesUrl":"http://api2.infobip.com/api/inbox",						// url to get the incoming messages (Pull method)
		"incomingMessagesMaxFetchNumber":100,											// limit the incoming messages per method call
		"deliveryReportsUrl":"http://api2.infobip.com/api/dlrpull",						// url to get Delivery reports (DLR)
		"sendHlrRequestUrl":"http://api2.infobip.com/api/hlr/sync",		    			// url to get HLR
		"registeredSendersUrl":"http://api.infobip.com/api/v2/command/senders",			// url to get the list of registered senders
		"registerSenderUrl":"http://api.infobip.com/api/command",						// url to register sender
		"verifySenderRegistrationUrl":"http://api.infobip.com/api/command", 			// url to verify sender registration
		"charset":"ISO-8859-1",															// used to encode http request string entity and url query parameters
		"PollingInterval":40000															// interval to check for DLR and Incoming Messages(MO) in milliseconds
	}
}